  LLAMA_LINEAR,
  LLAMA_SINUSOIDAL,
  LLAMA_SPHERICAL,
  LLAMA_SWIRL,
  LLAMA_HORSESHOE,
  LLAMA_POLAR,
  LLAMA_HANDKERCHIEF,
  LLAMA_HEART,
  LLAMA_DISC,
  LLAMA_SPIRAL,
  LLAMA_HYPERBOLIC,
  LLAMA_DIAMOND,
  LLAMA_EX,
  LLAMA_JULIA,
  LLAMA_BENT,
  LLAMA_WAVES,
  LLAMA_FISHEYE,
  LLAMA_POPCORN,
  LLAMA_EXPONENTIAL,
  LLAMA_POWER,
  LLAMA_COSINE,
  LLAMA_RING,
  LLAMA_FAN,
  LLAMA_BLOB,
  LLAMA_PDJ,
  LLAMA_FAN2,
  LLAMA_RINGS2,
  LLAMA_EYEFISH,
  LLAMA_BUBBLE,
  LLAMA_CYLINDER,
  LLAMA_PERSPECTIVE,
  LLAMA_NOISE,
  LLAMA_JULIAN,
  LLAMA_JULIASCOPE,
  LLAMA_BLUR,
  LLAMA_GAUSSIAN,
  LLAMA_RADIALBLUR,
  LLAMA_PIE,
  LLAMA_NGON,
  LLAMA_CURL,
  LLAMA_RECTANGLES,
  LLAMA_ARCH,
  LLAMA_TANGENT,
  LLAMA_SQUARE,
  LLAMA_RAYS,
  LLAMA_BLADE,
  LLAMA_SECANT,
  LLAMA_TWINTRAIN,
  LLAMA_CROSS,


void llama_linear (punto *p, funcion *v) {
  double x, y;
  
  x = v->a*p->x + v->b*p->y + v->c;
  y = v->d*p->x + v->e*p->y + v->f;
  
  p->x = x;
  p->y = y;
}

void llama_sinusoidal (punto *p, funcion *v) {
  double x, y;
  
  x = v->a*p->x + v->b*p->y + v->c;
  y = v->d*p->x + v->e*p->y + v->f;
  
  p->x = sin(x);
  p->y = sin(y);
}

void llama_spherical (punto *p, funcion *v) {
  double x, y, r2;
  
  x = v->a*p->x + v->b*p->y + v->c;
  y = v->d*p->x + v->e*p->y + v->f;
  r2 = x*x + y*y;
  
  p->x = x/r2;
  p->y = y/r2;
}

void llama_swirl (punto *p, funcion *v) {
  double x, y, r2;
  
  x = v->a*p->x + v->b*p->y + v->c;
  y = v->d*p->x + v->e*p->y + v->f;
  r2 = x*x + y*y;
  
  p->x = x*sin(r2) - y*cos(r2);
  p->y = x*cos(r2) + y*sin(r2);
}

void llama_horseshoe (punto *p, funcion *v) {
  double x, y, r;
  
  x = v->a*p->x + v->b*p->y + v->c;
  y = v->d*p->x + v->e*p->y + v->f;
  r = sqrt(x*x + y*y);
  
  p->x = (x*x - y*y)/r;
  p->y = 2.0*x*y/r;
}

void llama_polar (punto *p, funcion *v) {
  double x, y, r, tita;
  
  x = v->a*p->x + v->b*p->y + v->c;
  y = v->d*p->x + v->e*p->y + v->f;
  r = sqrt(x*x + y*y);
  tita = atan(x/y);
  
  p->x = tita/M_PI;
  p->y = r - 1.0;
}

void llama_handkerchief (punto *p, funcion *v) {
  double x, y, r, tita;
  
  x = v->a*p->x + v->b*p->y + v->c;
  y = v->d*p->x + v->e*p->y + v->f;
  r = sqrt(x*x + y*y);
  tita = atan(x/y);
  
  p->x = r*sin(tita + r);
  p->y = r*cos(tita - r);
}

void llama_heart (punto *p, funcion *v) {
  double x, y, r, tita;
  
  x = v->a*p->x + v->b*p->y + v->c;
  y = v->d*p->x + v->e*p->y + v->f;
  r = sqrt(x*x + y*y);
  tita = atan(x/y);
  
  p->x = r*sin(tita*r);
  p->y = -r*cos(tita*r);
}

void llama_disc (punto *p, funcion *v) {
  double x, y, r, tita;
  
  x = v->a*p->x + v->b*p->y + v->c;
  y = v->d*p->x + v->e*p->y + v->f;
  r = sqrt(x*x + y*y);
  tita = atan(x/y);
  
  p->x = tita*sin(M_PI*r)/r;
  p->y = tita*cos(M_PI*r)/r;
}

void llama_spiral (punto *p, funcion *v) {
  double x, y, r, tita;
  
  x = v->a*p->x + v->b*p->y + v->c;
  y = v->d*p->x + v->e*p->y + v->f;
  r = sqrt(x*x + y*y);
  tita = atan(x/y);
  
  p->x = (cos(tita) + sin(r))/r;
  p->y = (sin(tita) - cos(r))/r;
}

void llama_hyperbolic (punto *p, funcion *v) {
  double x, y, r, tita;
  
  x = v->a*p->x + v->b*p->y + v->c;
  y = v->d*p->x + v->e*p->y + v->f;
  r = sqrt(x*x + y*y);
  tita = atan(x/y);
  
  p->x = sin(tita)/r;
  p->y = r*cos(tita);
}

void llama_diamond (punto *p, funcion *v) {
  double x, y, r, tita;
  
  x = v->a*p->x + v->b*p->y + v->c;
  y = v->d*p->x + v->e*p->y + v->f;
  r = sqrt(x*x + y*y);
  tita = atan(x/y);
  
  p->x = sin(tita)*cos(r);
  p->y = cos(tita)*sin(r);
}

void llama_ex (punto *p, funcion *v) {
  double x, y, r, tita, p0, p1;
  
  x = v->a*p->x + v->b*p->y + v->c;
  y = v->d*p->x + v->e*p->y + v->f;
  r = sqrt(x*x + y*y);
  tita = atan(x/y);
  p0 = sin(tita + r);
  p1 = cos(tita - r);
  
  p->x = r*(pow(p0, 3) + pow(p1, 3));
  p->y = r*(pow(p0, 3) - pow(p1, 3));
}

void llama_julia (punto *p, funcion *v) {
  double x, y, r_2, tita, omega;
  
  x = v->a*p->x + v->b*p->y + v->c;
  y = v->d*p->x + v->e*p->y + v->f;
  r_2 = sqrt(sqrt(x*x + y*y));
  tita = atan(x/y);
  omega = RANDOM01() > 0.5 ? 0 : M_PI;
  
  p->x = r_2*cos(0.5*tita + omega);
  p->y = r_2*sin(0.5*tita + omega);
}

void llama_bent (punto *p, funcion *v) {
  double x, y;
  
  x = v->a*p->x + v->b*p->y + v->c;
  y = v->d*p->x + v->e*p->y + v->f;
  
  p->x = x >= 0 ? x : 2.0*x;
  p->y = y >= 0 ? y : 0.5*y;
}


